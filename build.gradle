plugins {
    id 'war'
    id 'java'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
    id 'co.uzzu.dotenv.gradle' version '2.0.0'
    id 'de.undercouch.download' version '5.0.4'
    id 'org.springframework.boot' version '2.6.6'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.dawnwords.jacoco.badge' version '0.2.4'
}

group = 'org.bbaw.aaew.tla'
version = '0.0.860-dev'
sourceCompatibility = '11'

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'tla-es'
            pom {
                name = 'TLA Elasticsearch Backend'
                description = 'Elasticsearch backend for the Thesaurus Linguae Aegyptiae web component'
            }
            from components.java
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    implementation.exclude module: 'spring-boot-starter-tomcat'
    implementation.exclude group: 'jakarta.xml.bind'
    implementation.exclude group: 'org.xmlunit'
    implementation.exclude group: 'org.skyscreamer'
    implementation.exclude module: 'jackson-dataformat-smile'
    // ES transport client stuff
    implementation.exclude module: 'transport'
    implementation.exclude module: 'transport-netty4-client'
    testImplementation.exclude module: 'junit-vintage-engine'
    testImplementation.exclude group: 'org.junit.vintage'
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation 'com.github.thesaurus-linguae-aegyptiae:tla-common:master-SNAPSHOT'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'org.yaml:snakeyaml:1.30'

    implementation 'org.springframework.boot:spring-boot:2.6.6'
    implementation 'org.springframework.boot:spring-boot-starter-jetty:2.6.6'
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.6.6'
    implementation 'org.springframework.data:spring-data-elasticsearch:4.3.3'
    implementation 'org.springframework:spring-web:5.3.18'
    implementation 'org.springframework:spring-webmvc:5.3.18'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.slf4j:slf4j-simple:2.0.0-alpha7'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.6'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

application {
    mainClass = 'tla.backend.App'
}

test {
    useJUnitPlatform{
      includeTags '!search'
    }
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    finalizedBy 'jacocoTestReport'
}

task testSearch(type: Test) {
    group = 'Verification'
    description = 'Runs search integration tests against populated ES instance.'
    systemProperty 'spring.profiles.active', 'search'
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    useJUnitPlatform {
      includeTags 'search'
    }
}

task testAll(type: Test) {
    group = 'Verification'
    description = 'Runs both search integration and unit tests.'
    useJUnitPlatform()
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
    finalizedBy 'generateJacocoBadge'
}

springBoot {
    buildInfo()
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    environment "ES_PORT", env.fetch("ES_PORT", "9200")
    environment "ES_HOST", env.fetch("ES_HOST", "localhost")
}

task downloadSample(type: Download) {
    group = 'Init'
    description = 'Download corpus sample file'
    src env.fetch("SAMPLE_URL", "http://")
    dest new File('sample.tar.gz')
    onlyIfModified true
    outputs.files(
        file("sample.tar.gz")
    )
}

clean {
    dependsOn 'cleanDownloadSample'
}

task populate {
    group = 'Init'
    description = 'Download corpus sample and ingest into database backend'
    doLast {
        bootRun.args = ['--data-file=sample.tar.gz', '--shutdown']
    }
    dependsOn 'downloadSample'
    finalizedBy 'bootRun'
}
